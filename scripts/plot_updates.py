'''
  Partially generated by GPT (02/07/2025).
'''
import matplotlib.pyplot as plt
import numpy as np
import os
import matplotlib.font_manager as fm

plt.rcParams.update({
    'font.family': 'Times New Roman'
})
for font in fm.findSystemFonts(fontpaths=None, fontext='ttf'):
    if "Libertine_R" in font:
        font_prop = fm.FontProperties(fname=font)
        font_name = font_prop.get_name()
        plt.rcParams.update({
            'font.family': font_name
        })

def read_results(result_path, exp_type="random"):
    if not os.path.exists(result_path):
        raise FileNotFoundError("Experimental results not found!")
    global insert_throughputs
    global delete_throughputs
    global memory
    methods = os.listdir(result_path)
    for method in methods:
        print("Processing", method)
        method_path = os.path.join(result_path, method)
        method_path = os.path.join(method_path, exp_type)
        idx = 0
        if method == 'teseo.13':
            idx = 0
        elif method == 'sortledton.4':
            idx = 1
        elif method == 'bvgt':
            idx = 2
        elif method == 'gtx':
            idx = 3
        elif method == 'radixgraph':
            idx = 4
        else:
            continue
        for file in os.listdir(method_path):
            print("Processing file", file)
            idx2 = 0
            if file.startswith("com-lj"):
                idx2 = 0
            elif file.startswith("dota-league"):
                idx2 = 1
            elif file.startswith("com-orkut"):
                idx2 = 2
            elif file.startswith("twitter-2010"):
                idx2 = 3
            else:
                continue
            with open(os.path.join(method_path, file), "r") as f:
                lines = f.readlines()
                m = 0
                insert_time = 0
                delete_time = 0
                for line in lines:
                    if line.startswith("Loaded"):
                        m = int(line.split()[1])
                    if line.startswith("Insertions"):
                        time_str = line.split()[6]
                        time_str = time_str.split(":")
                        multiple = 1
                        for i in range(len(time_str) - 1, -1, -1):
                            insert_time += float(time_str[i]) * multiple
                            multiple *= 60
                    if line.startswith("Deletions"):
                        time_str = line.split()[6]
                        time_str = time_str.split(":")
                        multiple = 1
                        for i in range(len(time_str) - 1, -1, -1):
                            delete_time += float(time_str[i]) * multiple
                            multiple *= 60
                if insert_time == 0:
                    insert_throughputs[idx][idx2] = 0
                else:
                    insert_throughputs[idx][idx2] = m / insert_time / 1e6
                if delete_time == 0:
                    delete_throughputs[idx][idx2] = 0
                else:
                    delete_throughputs[idx][idx2] = m / delete_time / 1e6
                    
# Example data
datasets = ['lj', 'dota', 'orkut', 'twitter']
methods = ['Teseo', 'Sortledton', 'Spruce', 'GTX', 'RadixGraph']
insert_throughputs = [
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0]
]
delete_throughputs = [
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0]
]
read_results("./results")

# Colors and hatch patterns for each method
colors = ['steelblue', 'orange', 'green', 'red', 'purple']
hatches = ['/', '\\', 'x', '-', 'o']

def plot(throughputs, output_path):
    # Plotting setup
    x = np.arange(len(datasets))  # Label locations
    width = 0.15  # Width of each bar

    fig, ax = plt.subplots(figsize=(10, 5))

    # Plot each method's bars
    for i, (method, color, hatch) in enumerate(zip(methods, colors, hatches)):
        offset = (i - 2) * width  # Center the bars
        ax.bar(x + offset, throughputs[i], width, label=method, color=color, hatch=hatch, edgecolor='black')

    # Axes labels and ticks
    ax.set_ylabel('Throughput (mops)', fontsize=30, fontweight='bold')
    # ax.set_xlabel('Datasets', fontsize=20, fontweight='bold')
    ax.set_xticks(x)
    ax.tick_params(axis='y', labelsize=30)
    ax.set_xticklabels(datasets, fontsize=30)
    # ax.legend(loc='lower center', bbox_to_anchor=(0.5, 1.02), columnspacing=0.5, fontsize=25, ncol=5)
    ax.grid(True, axis='y', linestyle='--', alpha=0.7)

    plt.tight_layout()
    plt.subplots_adjust(left=0.15)
    plt.savefig(output_path)

if not os.path.exists("./figures"):
    os.makedirs("./figures")
plot(insert_throughputs, "./figures/insert.pdf")
plot(delete_throughputs, "./figures/delete.pdf")
'''
  Partially generated by GPT (05/07/2025).
'''
import sqlite3
import os
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import numpy as np
from matplotlib import rcParams

plt.rcParams.update({
    'font.family': 'Times New Roman'
})
for font in fm.findSystemFonts(fontpaths=None, fontext='ttf'):
    if "Libertine_R" in font:
        font_prop = fm.FontProperties(fname=font)
        font_name = font_prop.get_name()
        plt.rcParams.update({
            'font.family': font_name
        })
        rcParams['font.family'] = font_name
        rcParams['mathtext.fontset'] = 'custom'
        rcParams['mathtext.rm'] = font_name

colors = ['teal', 'goldenrod', 'darkcyan', 'mediumvioletred', 'slategray']
markers = ['X', 'P', '*', '<', '>']
legends = ['a0', 'a1', 'a2', 'a3', 'a4']
hatches = ['.', '*', '+', '|', '//']
methods = ["Updated", "Trailing", "vEB"]

def plot1(x, y, output_path):
    fig, ax = plt.subplots(figsize=(6, 6))
    for i in range(len(y)):
        ax.step(
            x,
            y[i],
            color=colors[i],
            marker=markers[i],
            label=legends[i],
            markersize=15,
            markerfacecolor='white',
            markeredgewidth=1.5,
            linewidth=2,
            where='post'
        )
    ax.set_xlabel("Value of n", fontsize=30, fontweight='bold')
    ax.set_ylabel("Fanout", fontsize=30, fontweight='bold')
    ax.set_xscale('log')
    ax.tick_params(axis='y', labelsize=25)
    ax.tick_params(axis='x', labelsize=25)
    fig.legend(loc='upper center', handlelength=1.0, handletextpad=0.3, columnspacing=0.5, fontsize=30, ncol=5)
    plt.tight_layout(rect=[0, 0, 1, 0.85])
    plt.savefig(output_path)

def plot2(datasets, memory, output_path):
    # Plotting setup
    x = np.arange(len(datasets))  # Label locations
    colors = ['indigo', 'darkorange', 'mediumseagreen']
    width = 0.15  # Width of each bar

    fig, ax = plt.subplots(figsize=(6, 6))

    # Plot each method's bars
    for i, (method, color, hatch) in enumerate(zip(methods, colors, hatches)):
        offset = (i - 2) * width  # Center the bars
        ax.bar(x + offset, memory[i], width, label=method, color=color, hatch=hatch, edgecolor='black')

    # Axes labels and ticks
    ax.set_ylabel('Memory (MB)', fontsize=30, fontweight='bold')
    ax.set_xlabel('Value of n', fontsize=30, fontweight='bold')
    # ax.set_yscale('log')
    ax.set_xticks(x)
    ax.tick_params(axis='y', labelsize=25)
    ax.set_xticklabels(datasets, fontsize=25)
    fig.legend(loc='upper center', handlelength=1.0, handletextpad=0.3, columnspacing=0.5, fontsize=30, ncol=5)
    ax.grid(True, axis='y', linestyle='--', alpha=0.7)

    plt.tight_layout(rect=[0, 0, 1, 0.85])
    plt.savefig(output_path)

if not os.path.exists("./figures"):
    os.makedirs("./figures")
plot1(
    [100000, 307519, 615624, 1241023, 2655804],
    [[20, 21, 22, 23, 24],
     [3, 3, 3, 3, 2],
     [3, 3, 3, 2, 2],
     [3, 3, 2, 2, 2],
     [3, 2, 2, 2, 2]
    ], 'figures/sort.pdf'
)
plot2(
    [r'$10^5$', r'$10^6$', r'$10^7$'],
    [[32.09, 207.44, 1248.08],
     [33.37, 215.14, 1310.82],
     [119.12, 308.03, 1655.52]
    ], 'figures/memory_change.pdf'
)
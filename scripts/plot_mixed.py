'''
  Partially generated by GPT (05/07/2025).
'''
import sqlite3
import os
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import numpy as np

plt.rcParams.update({
    'font.family': 'Times New Roman'
})
for font in fm.findSystemFonts(fontpaths=None, fontext='ttf'):
    if "Libertine_R" in font:
        font_prop = fm.FontProperties(fname=font)
        font_name = font_prop.get_name()
        plt.rcParams.update({
            'font.family': font_name
        })

def read_results(result_path):
    if not os.path.exists(result_path):
        raise FileNotFoundError("Experimental results not found!")
    
    global throughput_g500
    global throughput_u24
    methods = os.listdir(result_path)
    for method in methods:
        print("Processing", method)
        method_path = os.path.join(result_path, method)
        method_path = os.path.join(method_path, 'mixed')
        idx = 0
        if method == 'teseo.13':
            idx = 0
        elif method == 'sortledton.4':
            idx = 1
        elif method == 'bvgt':
            idx = 2
        elif method == 'gtx':
            idx = 3
        elif method == 'radixgraph':
            idx = 4
        else:
            continue

        if not os.path.exists(method_path):
            continue

        for file in os.listdir(method_path):
            if not file.endswith('sqlite3'):
                continue
            print("Processing file", file)

            # Connect to the SQLite database
            conn = sqlite3.connect(os.path.join(method_path, file))
            cursor = conn.cursor()

            # Load time and ops from the table
            cursor.execute("SELECT * FROM aging_intermediate_throughput3")
            rows = cursor.fetchall()

            # Extract time (3rd col) and cumulative ops (4th col)
            times = [row[2] for row in rows]
            ops = [row[3] for row in rows]

            # Total operations
            total_ops = ops[-1]
            ten_percent = total_ops // 10
            if method == 'gtx':
                # We only execute 20% operations for GTX (cause it raises OOM for more operations)
                # If you executed the full operations with a large-memory machine, comment this
                ten_percent *= 5

            # Compute throughput every 10%
            result = []
            current_threshold = ten_percent

            for i in range(1, len(ops)):
                if ops[i] >= current_threshold:
                    # Time and ops between checkpoints
                    result.append(times[i])
                    
                    current_threshold += ten_percent

                    # Stop if weâ€™ve reached 100%
                    if current_threshold > total_ops:
                        break

            if file.startswith("graph500-24"):
                throughput_g500[idx] = result[:]
            elif file.startswith("uniform-24"):
                throughput_u24[idx] = result[:]
            # Close DB connection
            conn.close()

throughput_g500 = [
    [],
    [],
    [],
    [],
    []
]
throughput_u24 = [
    [],
    [],
    [],
    [],
    []
]
read_results("./results")

legend_labels = ['Teseo', 'Sortledton', 'Spruce', 'GTX', 'RadixGraph']
colors = ['steelblue', 'orange', 'green', 'red', 'purple']
markers = ['o', 's', '^', 'D', 'v']

def plot(throughput, output_path):
    fig, ax = plt.subplots(figsize=(7, 4))
    for i in range(len(throughput)):
        x = ['10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%']
        x = x[:len(throughput[i])]
        if len(throughput[i]) == 0:
            continue
        y = throughput[i]
        ax.plot(
            x,
            y,
            label=legend_labels[i],
            color=colors[i],
            marker=markers[i],
            markersize=15,
            markerfacecolor='white',
            markeredgewidth=1.5,
            linewidth=2
        )
    ax.set_xlabel("Progress (%)", fontsize=25, fontweight='bold')
    ax.set_ylabel("Time (s)", fontsize=25, fontweight='bold')
    x_ticks = ['', '20%', '', '40%', '', '60%', '', '80%', '', '100%']
    ax.set_xticks(np.arange(len(x_ticks)))
    ax.set_xticklabels(x_ticks, fontsize=25)
    ax.tick_params(axis='y', labelsize=25)
    # ax.legend(loc='lower center', bbox_to_anchor=(0.5, 1.02), columnspacing=0.5, fontsize=25, ncol=5)
    plt.tight_layout()
    plt.savefig(output_path)

if not os.path.exists("./figures"):
    os.makedirs("./figures")
plot(throughput_g500, './figures/mixed_g500.pdf')
plot(throughput_u24, './figures/mixed_u24.pdf')
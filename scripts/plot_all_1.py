'''
  Partially generated by GPT (30/09/2025).
'''
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os
import matplotlib.font_manager as fm

plt.rcParams.update({
    'font.family': 'Times New Roman'
})
for font in fm.findSystemFonts(fontpaths=None, fontext='ttf'):
    if "Libertine_R" in font:
        font_prop = fm.FontProperties(fname=font)
        font_name = font_prop.get_name()
        plt.rcParams.update({
            'font.family': font_name
        })
                    
# Example data
datasets = ['lj', 'dota', 'orkut', 'g24', 'u24', 'twitter']
methods = ['Teseo', 'Sortledton', 'Spruce', 'GTX', 'RadixGraph']

# Colors and hatch patterns for each method
cs = plt.colormaps['tab10']
colors = [cs(i) for i in range(len(methods))]
hatches = ['/', '\\', 'x', '-', 'o']

captions = [
    "(a) Edge insertion throughput",
    "(b) Edge deletion throughput",
    "(c) Memory usage of the graph",
    "(d) Vertex insertion throughput",
    "(e) Vertex query throughput",
    "(f) Memory usage of vertices"
]

# ==================================
# Load CSVs
# ==================================
edge_insertion_throughput_df = pd.read_csv("csv/edge_insertion.csv")
edge_deletion_throughput_df = pd.read_csv("csv/edge_deletion.csv")
vertex_insertion_throughput_df = pd.read_csv("csv/vertex_insertion.csv")
vertex_query_throughput_df = pd.read_csv("csv/vertex_query.csv")
edge_memory_df = pd.read_csv("csv/memory.csv")
vertex_memory_df = pd.read_csv("csv/vertex_memory.csv")

# Drop last nan column
edge_insertion_throughput_data = edge_insertion_throughput_df.iloc[:, 1:-1].values  # shape: (num_methods, num_datasets)
edge_deletion_throughput_data = edge_deletion_throughput_df.iloc[:, 1:-1].values
vertex_insertion_throughput_data = vertex_insertion_throughput_df.iloc[:, 1:-1].values
vertex_query_throughput_data = vertex_query_throughput_df.iloc[:, 1:-1].values
edge_memory_data = edge_memory_df.iloc[:, 1:-1].values
vertex_memory_data = vertex_memory_df.iloc[:, 1:-1].values

# ==================================
# Plot helpers
# ==================================
def plot(ax, data, ylabel, log=False):
    x = np.arange(len(datasets))
    width = 0.15  # bar width

    for i, (method, color, hatch) in enumerate(zip(methods, colors, hatches)):
        offset = (i - (len(methods) - 1) / 2) * width
        ax.bar(x + offset, data[i], width,
               label=method, color=color, hatch=hatch, edgecolor="black")

    ax.set_ylabel(ylabel, fontsize=30, fontweight="bold")
    ax.set_xticks(x)
    ax.set_xticklabels(datasets, fontsize=25)
    ax.tick_params(axis="y", labelsize=25)
    ax.grid(True, axis="y", linestyle="--", alpha=0.7)

    if log:
        ax.set_yscale("log")

if not os.path.exists("./figures"):
    os.makedirs("./figures")
# ==================================
# Make 2Ã—3 plots
# ==================================
fig, axes = plt.subplots(2, 3, figsize=(35, 10), sharey=False)
axes = axes.flatten()

for idx, (ax, caption) in enumerate(zip(axes, captions), start=1):
    if idx == 1:  # edge insertion
        plot(ax, edge_insertion_throughput_data, ylabel="Throughput (mops)", log=False)
    elif idx == 2:  # edge deletion
        plot(ax, edge_deletion_throughput_data, ylabel="Throughput (mops)", log=False)
    elif idx == 3:  # edge memory
        plot(ax, edge_memory_data, ylabel="Memory (MB)", log=True)
    elif idx == 4:  # vertex insertion
        plot(ax, vertex_insertion_throughput_data, ylabel="Throughput (mops)", log=False)
    elif idx == 5:  # vertex query
        plot(ax, vertex_query_throughput_data, ylabel="Throughput (mops)", log=False)
    elif idx == 6:  # vertex memory
        plot(ax, vertex_memory_data, ylabel="Memory (MB)", log=True)
    ax.set_xlabel(caption, fontsize=30, fontweight="bold", labelpad=15)

# Shared legend at top
handles, labels = axes[0].get_legend_handles_labels()
fig.legend(handles, labels,
           loc="upper center",           # center horizontally
           ncol=len(methods), fontsize=35)

plt.tight_layout(rect=[0, 0, 1, 0.85])  # leave space for the legend
plt.savefig("figures/combined_plots1.pdf")
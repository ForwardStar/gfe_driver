'''
  Partially generated by GPT (02/07/2025).
'''
import matplotlib.pyplot as plt
import numpy as np
import os
import matplotlib.font_manager as fm

plt.rcParams.update({
    'font.family': 'Times New Roman'
})
for font in fm.findSystemFonts(fontpaths=None, fontext='ttf'):
    if "Libertine_R" in font:
        font_prop = fm.FontProperties(fname=font)
        font_name = font_prop.get_name()
        plt.rcParams.update({
            'font.family': font_name
        })

def read_results(result_path, folder_name, one_hop=True):
    if not os.path.exists(result_path):
        raise FileNotFoundError("Experimental results not found!")
    global one_hop_throughputs
    global two_hop_throughputs
    global write_throughputs
    methods = os.listdir(result_path)
    for method in methods:
        print("Processing", method)
        method_path = os.path.join(result_path, method)
        method_path = os.path.join(method_path, folder_name)
        idx = 0
        if method == 'gtx':
            idx = 0
        elif method == 'radixgraph':
            idx = 1
        else:
            continue
        for file in os.listdir(method_path):
            print("Processing file", file)
            if not "dota" in file:
                continue
            idx2 = 0
            if "4" in file:
                idx2 = 0
            elif "8" in file:
                idx2 = 1
            elif "16" in file:
                idx2 = 2
            elif "32" in file:
                idx2 = 3
            else:
                continue
            with open(os.path.join(method_path, file), "r") as f:
                lines = f.readlines()
                max_progress = 0
                for line in lines:
                    if "Progress" in line:
                        max_progress = int(line.split()[-1].rstrip('%'))
                    if "read-threads" in file and line.startswith("Graphaltyics finished."):
                        tm = float(line.split()[-2])
                        op = int(line.split()[-7])
                        op *= 1000
                        if one_hop:
                            one_hop_throughputs[idx][idx2] = op / tm
                        else:
                            two_hop_throughputs[idx][idx2] = op / tm
                    if "write-threads" in file and line.startswith("[Aging2] Updates performed"):
                        time_str = line.split()[-2]
                        time_str = time_str.split(":")
                        tm = 0
                        multiple = 1
                        for i in range(len(time_str) - 1, -1, -1):
                            tm += float(time_str[i]) * multiple
                            multiple *= 60
                        # op = 2603795200 * max_progress / 100 / 1e6
                        op = 508703130 * max_progress / 100 / 1e6
                        write_throughputs[idx][idx2] = op / tm
                    
# Example data
num_thread = ['4', '8', '16', '32']
methods = ['GTX', 'RadixGraph']
one_hop_throughputs = [
    [0, 0, 0, 0],
    [0, 0, 0, 0]
]
two_hop_throughputs = [
    [0, 0, 0, 0],
    [0, 0, 0, 0]
]
write_throughputs = [
    [0, 0, 0, 0],
    [0, 0, 0, 0]
]

# Colors and hatch patterns for each method
cs = plt.colormaps['tab10']
colors = [cs(3), cs(4)]
hatches = ['-', 'o']

def plot(ax, throughputs, yaxis, float=False):
    # Plotting setup
    x_base = np.array([0, 0.5, 1, 1.5])
    width = 0.2  # Width of each bar

    # Plot each method's bars
    for i, (method, color, hatch) in enumerate(zip(methods, colors, hatches)):
        offset = (i - 0.5) * width # Center the bars
        ax.bar(x_base + offset, throughputs[i], width, label=method, color=color, hatch=hatch, edgecolor='black')

    # Axes labels and ticks
    ax.set_ylabel(yaxis, fontsize=30, fontweight='bold')
    ax.set_xlabel('Number of threads', fontsize=30, fontweight='bold')
    ax.set_xticks(x_base)
    ax.tick_params(axis='y', labelsize=25)
    ax.set_xticklabels(num_thread, fontsize=25)
    if float:
        ax.yaxis.get_offset_text().set_fontsize(35)
        ax.yaxis.offsetText.set_visible(False)  # Hide automatic 1e6
        ax.text(-0.25, 2.5e6, '1e6', fontsize=35,
            va='top', ha='left')
    ax.grid(True, axis='y', linestyle='--', alpha=0.7)

if not os.path.exists("./figures"):
    os.makedirs("./figures")
# ==================================
# Make 1Ã—3 plots
# ==================================
fig, axes = plt.subplots(1, 3, figsize=(22, 7), sharey=False)
axes = axes.flatten()
print("Please enter the path to the concurrent one-hop neighbor results.")
print("E.g., if the path is 'results/radixgraph/concurrent-1-hop', just enter 'concurrent-1-hop'.")
one_hop_folder = input("Enter the folder name for one-hop neighbor results: ").strip()
print("Please enter the path to the concurrent two-hop neighbor results.")
print("E.g., if the path is 'results/radixgraph/concurrent-2-hop', just enter 'concurrent-2-hop'.")
two_hop_folder = input("Enter the folder name for two-hop neighbor results: ").strip()
read_results("./results", one_hop_folder, one_hop=True)
read_results("./results", two_hop_folder, one_hop=False)
plot(axes[0], one_hop_throughputs, yaxis="Throughput (qops)", float=True)
axes[0].set_xlabel("(a) 1-HN", fontsize=35, fontweight='bold')
plot(axes[1], two_hop_throughputs, yaxis="Throughput (qops)")
axes[1].set_xlabel("(b) 2-HN", fontsize=35, fontweight='bold')
plot(axes[2], write_throughputs, yaxis="Throughput (mops)")
axes[2].set_xlabel("(c) Updates", fontsize=35, fontweight='bold')

handles, labels = axes[0].get_legend_handles_labels()
fig.legend(handles, labels,
           loc="upper center",           # center horizontally
           ncol=len(methods), fontsize=35)
plt.tight_layout(rect=[0, 0, 1, 0.8])  # leave space for the legend
plt.savefig("figures/combined_plots4.pdf")
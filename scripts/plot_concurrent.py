'''
  Partially generated by GPT (02/07/2025).
'''
import matplotlib.pyplot as plt
import numpy as np
import os
import matplotlib.font_manager as fm

plt.rcParams.update({
    'font.family': 'Times New Roman'
})
for font in fm.findSystemFonts(fontpaths=None, fontext='ttf'):
    if "Libertine_R" in font:
        font_prop = fm.FontProperties(fname=font)
        font_name = font_prop.get_name()
        plt.rcParams.update({
            'font.family': font_name
        })

def read_results(result_path):
    if not os.path.exists(result_path):
        raise FileNotFoundError("Experimental results not found!")
    global read_throughputs
    global write_throughputs
    methods = os.listdir(result_path)
    for method in methods:
        print("Processing", method)
        method_path = os.path.join(result_path, method)
        method_path = os.path.join(method_path, 'concurrent')
        idx = 0
        if method == 'gtx':
            idx = 0
        elif method == 'radixgraph':
            idx = 1
        else:
            continue
        for file in os.listdir(method_path):
            print("Processing file", file)
            if not "dota" in file:
                continue
            idx2 = 0
            if "4" in file:
                idx2 = 0
            elif "8" in file:
                idx2 = 1
            elif "16" in file:
                idx2 = 2
            elif "32" in file:
                idx2 = 3
            else:
                continue
            with open(os.path.join(method_path, file), "r") as f:
                lines = f.readlines()
                max_progress = 0
                for line in lines:
                    if "Progress" in line:
                        max_progress = int(line.split()[-1].rstrip('%'))
                    if "read-threads" in file and line.startswith("Graphaltyics finished."):
                        tm = float(line.split()[-2])
                        op = int(line.split()[-7])
                        # op *= 16777215
                        op *= 317727
                        read_throughputs[idx][idx2] = op / tm
                    if "write-threads" in file and line.startswith("[Aging2] Updates performed"):
                        time_str = line.split()[-2]
                        time_str = time_str.split(":")
                        tm = 0
                        multiple = 1
                        for i in range(len(time_str) - 1, -1, -1):
                            tm += float(time_str[i]) * multiple
                            multiple *= 60
                        # op = 2603795200 * max_progress / 100 / 1e6
                        op = 508703130 * max_progress / 100 / 1e6
                        write_throughputs[idx][idx2] = op / tm
                    
# Example data
num_thread = ['4', '8', '16', '32']
methods = ['GTX', 'RadixGraph']
read_throughputs = [
    [0, 0, 0, 0],
    [0, 0, 0, 0]
]
write_throughputs = [
    [0, 0, 0, 0],
    [0, 0, 0, 0]
]
read_results("./results")

# Colors and hatch patterns for each method
colors = ['red', 'purple']
hatches = ['-', 'o']

def plot(throughputs, output_path, yaxis):
    # Plotting setup
    x = np.arange(len(num_thread))  # Label locations
    width = 0.3  # Width of each bar

    fig, ax = plt.subplots(figsize=(8, 5))

    # Plot each method's bars
    for i, (method, color, hatch) in enumerate(zip(methods, colors, hatches)):
        offset = (i - 0.5) * width  # Center the bars
        ax.bar(x + offset, throughputs[i], width, label=method, color=color, hatch=hatch, edgecolor='black')

    # Axes labels and ticks
    ax.set_ylabel(yaxis, fontsize=30, fontweight='bold')
    ax.set_xlabel('Number of threads', fontsize=30, fontweight='bold')
    ax.set_xticks(x)
    ax.tick_params(axis='y', labelsize=30)
    ax.set_xticklabels(num_thread, fontsize=30)
    # ax.legend(loc='lower center', bbox_to_anchor=(0.5, 1.02), columnspacing=0.5, fontsize=25, ncol=5)
    ax.grid(True, axis='y', linestyle='--', alpha=0.7)

    plt.tight_layout()
    plt.subplots_adjust(left=0.15)
    plt.savefig(output_path)

if not os.path.exists("./figures"):
    os.makedirs("./figures")
plot(read_throughputs, "./figures/concurrent_read.pdf", 'Throughput (qops)')
plot(write_throughputs, "./figures/concurrent_write.pdf", 'Throughput (mops)')
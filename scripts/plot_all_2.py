'''
  Partially generated by GPT (05/07/2025).
'''
import sqlite3
import os
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import numpy as np

plt.rcParams.update({
    'font.family': 'Times New Roman'
})
for font in fm.findSystemFonts(fontpaths=None, fontext='ttf'):
    if "Libertine_R" in font:
        font_prop = fm.FontProperties(fname=font)
        font_name = font_prop.get_name()
        plt.rcParams.update({
            'font.family': font_name
        })

def read_results_mixed(result_path):
    if not os.path.exists(result_path):
        raise FileNotFoundError("Experimental results not found!")
    
    global mixed_u24
    global mixed_g500
    methods = os.listdir(result_path)
    for method in methods:
        print("Processing", method)
        method_path = os.path.join(result_path, method)
        method_path = os.path.join(method_path, 'mixed')
        idx = 0
        if method == 'teseo.13':
            idx = 0
        elif method == 'sortledton.4':
            idx = 1
        elif method == 'bvgt':
            idx = 2
        elif method == 'gtx':
            idx = 3
        elif method == 'radixgraph':
            idx = 4
        else:
            continue

        if not os.path.exists(method_path):
            continue

        for file in os.listdir(method_path):
            if not file.endswith('sqlite3'):
                continue
            print("Processing file", file)

            # Connect to the SQLite database
            conn = sqlite3.connect(os.path.join(method_path, file))
            cursor = conn.cursor()

            # Load time and ops from the table
            cursor.execute("SELECT * FROM aging_intermediate_throughput3")
            rows = cursor.fetchall()

            # Extract time (3rd col) and cumulative ops (4th col)
            times = [row[2] for row in rows]
            ops = [row[3] for row in rows]

            # Total operations
            total_ops = ops[-1]
            ten_percent = total_ops // 10
            if method == 'gtx' and (file.startswith("graph500-24") or file.startswith("uniform-24")):
                # We only execute 20% operations for GTX (cause it raises OOM for more operations)
                # If you executed the full operations with a large-memory machine, comment this
                ten_percent *= 5

            # Compute throughput every 10%
            result = []
            current_threshold = ten_percent

            for i in range(1, len(ops)):
                if ops[i] >= current_threshold:
                    # Time and ops between checkpoints
                    result.append(times[i])
                    
                    current_threshold += ten_percent

                    # Stop if we’ve reached 100%
                    if current_threshold > total_ops:
                        break

            if file.startswith("graph500-24"):
                mixed_g500[idx] = result[:]
            elif file.startswith("uniform-24"):
                mixed_u24[idx] = result[:]
            # Close DB connection
            conn.close()

def read_results_delete(result_path):
    if not os.path.exists(result_path):
        raise FileNotFoundError("Experimental results not found!")
    
    global mixed_u24
    global mixed_g500
    methods = os.listdir(result_path)
    for method in methods:
        print("Processing", method)
        method_path = os.path.join(result_path, method)
        method_path = os.path.join(method_path, 'delete-only')
        idx = 0
        if method == 'teseo.13':
            idx = 0
        elif method == 'sortledton.4':
            idx = 1
        elif method == 'bvgt':
            idx = 2
        elif method == 'gtx':
            idx = 3
        elif method == 'radixgraph':
            idx = 4
        else:
            continue

        if not os.path.exists(method_path):
            continue

        for file in os.listdir(method_path):
            print("Processing file", file)
            with open(os.path.join(method_path, file), "r") as f:
                lines = f.readlines()
                memory_before = 0
                start_delete = False
                for line in lines:
                    if line.startswith("[Aging2] Memory before:"):
                        memory_before = float(line.split()[3])
                    if "Progress: 50%" in line:
                        start_delete = True
                    if start_delete and line.startswith("Memory consumption:"):
                        memory_after = int(line.split()[2])
                        memory_consumption = memory_after - memory_before
                        if memory_consumption > 0:
                            if file.startswith("graph500-24"):
                                delete_g500[idx].append(memory_consumption)
                            elif file.startswith("uniform-24"):
                                delete_u24[idx].append(memory_consumption)
            
    # Only keep 10 points (10% to 100%)
    for i in range(len(delete_g500)):
        ten_percent = len(delete_g500[i]) // 10
        if ten_percent > 0:
            delete_g500[i] = delete_g500[i][::ten_percent][:10]
        ten_percent = len(delete_u24[i]) // 10
        if ten_percent > 0:
            delete_u24[i] = delete_u24[i][::ten_percent][:10]


mixed_g500 = [
    [],
    [],
    [],
    [],
    []
]
mixed_u24 = [
    [],
    [],
    [],
    [],
    []
]
delete_g500 = [
    [],
    [],
    [],
    [],
    []
]
delete_u24 = [
    [],
    [],
    [],
    [],
    [] 
]
read_results_mixed("./results")
read_results_delete("./results")
print(delete_g500)
print(delete_u24)

legend_labels = ['Teseo', 'Sortledton', 'Spruce', 'GTX', 'RadixGraph']
cs = plt.colormaps['tab10']
colors = [cs(i) for i in range(len(legend_labels))]
markers = ['o', 's', '^', 'D', 'v']

def plot(ax, throughput):
    for i in range(len(throughput)):
        x = ['10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%']
        x = x[:len(throughput[i])]
        if len(throughput[i]) == 0:
            continue
        y = throughput[i]
        ax.plot(
            x,
            y,
            label=legend_labels[i],
            color=colors[i],
            marker=markers[i],
            markersize=15,
            markerfacecolor='white',
            markeredgewidth=1.5,
            linewidth=2
        )
    ax.set_xlabel("Progress (%)", fontsize=30, fontweight='bold')
    ax.set_ylabel("Time (s)", fontsize=30, fontweight='bold')
    x_ticks = ['', '20%', '', '40%', '', '60%', '', '80%', '', '100%']
    ax.set_xticks(np.arange(len(x_ticks)))
    ax.set_xticklabels(x_ticks, fontsize=30)
    ax.tick_params(axis='y', labelsize=30)

if not os.path.exists("./figures"):
    os.makedirs("./figures")
# ==================================
# Make 1×4 plots
# ==================================
fig, axes = plt.subplots(1, 4, figsize=(25, 7), sharey=False)
axes = axes.flatten()

plot(axes[0], mixed_g500)
axes[0].set_xlabel("(a) Updates on g24", fontsize=35, fontweight='bold')
plot(axes[1], mixed_u24)
axes[1].set_xlabel("(b) Updates on u24", fontsize=35, fontweight='bold')
axes[2].set_xlabel("(c) Deletes on g24", fontsize=35, fontweight='bold')
axes[3].set_xlabel("(d) Deletes on u24", fontsize=35, fontweight='bold')

handles, labels = axes[0].get_legend_handles_labels()
fig.legend(handles, labels,
           loc="upper center",           # center horizontally
           ncol=5, fontsize=40)
plt.tight_layout(rect=[0, 0, 1, 0.8])  # leave space for the legend
plt.savefig("./figures/combined_plots2.pdf", bbox_inches='tight')